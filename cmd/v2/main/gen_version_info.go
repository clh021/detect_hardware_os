//go:generate sh -c "go run gen_version_info.go"

//go:build ignore
// +build ignore

// This file will be generated from version_info.go.tpl using a generator script.

package main

import (
	"bufio"
	"bytes"
	"log"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"text/template"
	"time"
)

func main() {
	gitTime := getGitTime()
	buildTime := time.Now().Format("2006-01-02 15:04:05")
	gitHash := getGitHash()
	gitCount := getGitCommitCount()

	const tmplString = `
package main

const (
    // GitTime is the timestamp of the latest commit.
    GitTime = "{{.GitTime}}"
    // BuildTime is the timestamp when this binary was built.
    BuildTime = "{{.BuildTime}}"
    // GitHash represents the short hash of the current commit.
    GitHash = "{{.GitHash}}"
    // GitCount is the total number of commits in the repository.
    GitCount = {{.GitCount}}
)
func showVersionInfo()  {
	fmt.Println("Version Build Info:")
	fmt.Println("\tBuild Time: ", BuildTime)
	fmt.Println("\tBuild  Ver: ", fmt.Sprintf("v0.0.%d", GitCount))
	fmt.Println("\tGit   Time: ", GitTime)
	fmt.Println("\tGit Commit: ", GitHash)
	os.Exit(0)
}
`
	// tmpl, err := template.New("version_info").ParseFiles("version_info.go.tpl")
	tmpl, err := template.New("version_info").Parse(tmplString)
	if err != nil {
		log.Fatalf("failed to parse template: %v", err)
	}

	if tmpl.Tree == nil { // 添加对模板是否为空或无效的检查
		log.Fatalf("template 'version_info' is incomplete or empty")
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, map[string]interface{}{
		"GitTime":   gitTime,
		"BuildTime": buildTime,
		"GitHash":   gitHash,
		"GitCount":  gitCount,
	}); err != nil {
		log.Fatalf("failed to execute template: %v", err)
	}


	f, err := os.Create("version_info.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	w := bufio.NewWriter(f)
	// w.WriteString("// Code generated by go generate; DO NOT EDIT.\n\n")
	if _, err := w.Write(buf.Bytes()); err != nil {
		panic(err)
	}
	if err := w.Flush(); err != nil {
		panic(err)
	}
}

func getGitTime() string {
	cmd := exec.Command("git", "show", "-s", "--format=%cd", "--date=format:'%Y-%m-%d %H:%M:%S'")
	var out bytes.Buffer
	cmd.Stdout = &out
	cmd.Run()
	return strings.TrimSpace(out.String())
}

func getGitHash() string {
	cmd := exec.Command("git", "rev-parse", "HEAD")
	var out bytes.Buffer
	cmd.Stdout = &out
	cmd.Run()
	return strings.TrimSpace(out.String())
}

func getGitCommitCount() int {
	cmd := exec.Command("git", "rev-list", "HEAD", "--count")
	var out bytes.Buffer
	cmd.Stdout = &out
	cmd.Run()
	count, err := strconv.Atoi(strings.TrimSpace(out.String()))
	if err != nil {
		log.Fatal(err)
	}
	return count
}